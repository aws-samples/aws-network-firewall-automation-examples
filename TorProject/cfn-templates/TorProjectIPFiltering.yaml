Parameters:
  RuleGroupName:
    Type: String
    Default: 'AutoUpdating-TorProjectIPList'
  RuleGroupAction:
    Type: String
    Description: "Used to define the action to take on a matching rule if found"
    Default : 'drop'
    AllowedValues:
      - 'alert'
      - 'drop'

Resources:
  StatefulRulegroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: !Sub "${AWS::StackName}-${RuleGroupName}-${RuleGroupAction}"
      Type: STATEFUL
      RuleGroup:
        RulesSource:
          RulesString: '#This will be updated via the Lambda function'
      Capacity: 8000
      Description: >-
        Used to track a list of Emerging IP Threats from
        https://check.torproject.org/exit-addresses
      Tags: 
        - Key: "ProjectName"
          Value: "TorProjectIPFiltering"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      - PolicyName: NetworkFirewall
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'network-firewall:*'
            Resource: 
              - !GetAtt StatefulRulegroup.RuleGroupArn
      Tags: 
          - Key: "ProjectName"
            Value: "TorProjectIPFiltering"
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 14
    DeletionPolicy: Retain
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "TorProjectDailyTrigger"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: "ENABLED"
      Targets: 
        - Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
  LambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Handler: index.lambda_handler
      Timeout: 60
      Description: Used to fetch data from the Emerging Threats IP list and update the associated RuleGroup
      Tags: 
        - 
          Key: "ProjectName"
          Value: "TorProjectIPFiltering"
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import urllib.request
          from datetime import datetime
          import cfnresponse

          TOR_PROJECT_URL = "https://check.torproject.org/exit-addresses"
          RULE_GROUP_ARN = "${StatefulRulegroup.RuleGroupArn}"

          networkfirewall = boto3.client('network-firewall')

          def fetch_ips():
              print("Fetching the list of IP addresses...")
              try:
                  with urllib.request.urlopen(TOR_PROJECT_URL) as response:
                      data = response.read().decode('utf-8')
                  
                  ip_list = [line.split()[1] for line in data.splitlines() if line.startswith("ExitAddress ")]
                  print(f"Fetched {len(ip_list)} IP addresses...")
                  return ip_list
              except urllib.error.URLError as e:
                  print(f"Error fetching IP addresses: {e}")
                  return []

          def update_rules(rule_group):
              params = rule_group.copy()
              print(params) # Debug line
              params['RuleGroupName'] = params['RuleGroupResponse']['RuleGroupName']
              params['Type'] = params['RuleGroupResponse']['Type']
              # Remove keys that can't be updated
              params.pop('ResponseMetadata', None)
              params.pop('Capacity', None)
              params.pop('RuleGroupResponse', None)
              
              print("Updating rules...")
              try:
                  networkfirewall.update_rule_group(**params)
                  print(f"Updated '{params['RuleGroupName']}'.")
              except Exception as e:
                  print(f"Error updating the rules for '{params['RuleGroupName']}': {str(e)}")

          def create_rules(rule_group, type_):
              ip_list = fetch_ips()

              rules_string = f"# Last updated: {datetime.utcnow().isoformat()}\n"
              rules_string += f"# Using a list of {len(ip_list)} IP addresses\n"
              
              for index, ip in enumerate(ip_list):
                  rules_string += f"{type_} ip {ip} any -> any any (msg:\"{type_} emerging threats traffic from {ip}\"; rev:1; sid:55{index};)\n"
                  rules_string += f"{type_} ip any any -> {ip} any (msg:\"{type_} emerging threats traffic to {ip}\"; rev:1; sid:66{index};)\n"

              rule_group['RuleGroup']['RulesSource']['RulesString'] = rules_string
              update_rules(rule_group)

          def lambda_handler(event, context):
              if event.get('RequestType') == "Delete":
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'message': 'Function executed successfully'})
                  return {'statusCode': 200, 'body': json.dumps('SUCCESS')}

              try:
                  params = {
                      "Type": "STATEFUL", 
                      "RuleGroupArn": RULE_GROUP_ARN
                  }
                  
                  print("Searching for Rule Groups...")
                  res = networkfirewall.describe_rule_group(**params)
                  if 'RuleGroupResponse' in res:
                      print("Found Rule Group...")
                      create_rules(res, "drop")
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'message': 'Function executed successfully'})
                  else:
                      print("ERROR: No matching Rule Group found...")
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'message': 'No matching Rule Group found'})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'message': f'Error: {str(e)}'})

              return {
                  'statusCode': 200,
                  'body': 'Function executed successfully'
              }
