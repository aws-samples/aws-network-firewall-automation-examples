Parameters:
  RuleGroupName:
    Type: String
    Default: 'AutoUpdating-EmergingThreatsBotCCList'
  RuleGroupAction:
    Type: String
    Description: "Used to define the action to take on a matching rule if found"
    Default : 'drop'
    AllowedValues:
      - 'alert'
      - 'drop'
  
Resources:
  StatefulRulegroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: !Sub "${AWS::StackName}-${RuleGroupName}-${RuleGroupAction}"
      Type: STATEFUL
      RuleGroup:
        RulesSource:
          RulesString: '#This will be automatically updated via the Lambda function'
      Capacity: 500
      Description: >-
        Used to track a list of Emerging IP Threats from
        https://rules.emergingthreats.net/blockrules/emerging-botcc.suricata.rules. It is updated daily by the CloudWatch Event: EmergingThreatsBotCCDailyTrigger.
      Tags: 
        - Key: "ProjectName"
          Value: "EmergingThreatsBotCC"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      - PolicyName: NetworkFirewall
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'network-firewall:*'
            Resource: 
              - !GetAtt StatefulRulegroup.RuleGroupArn
      Tags: 
          - Key: "ProjectName"
            Value: "EmergingThreatsBotCC"
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
    DeletionPolicy: Retain
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EmergingThreatsBotCCDailyTrigger"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: "ENABLED"
      Targets: 
        - Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
  LambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 60
      Description: Used to fetch data from the Emerging Threats Bot CC list and update the associated RuleGroup
      Tags: 
        - Key: "ProjectName"
          Value: "EmergingThreatsBotCC"
      Code:
        ZipFile: !Sub |
          var AWS = require("aws-sdk");
          var response = require('cfn-response');
          var https = require("https");
          var listOfRules = [];
          const url = "https://rules.emergingthreats.net/blockrules/emerging-botcc.suricata.rules";

          const networkfirewall = new AWS.NetworkFirewall();

          function fetchRules() {
            console.log("Fetching the list of rules...");
            return new Promise((resolve, reject) => {
              let dataString = '';
              let post_req = https.request(url, (res) => {
                res.setEncoding("utf8");
                res.on('data', chunk => {
                  dataString += chunk;
                });
                res.on('end', () => {
                  listOfRules = dataString.split(/\r?\n/);
                  console.log("Fetched rules...");
                  resolve();
                });
                res.on('error', (err) => {
                  reject(err);
                });
              });
              post_req.end();
            });
          }

          let updateRules = async function (ruleGroup,newRules) {
            let params = ruleGroup;
            delete params.Capacity;
            params.RuleGroupName = params.RuleGroupResponse.RuleGroupName;
            params.Description = params.RuleGroupResponse.Description;
            params.Type = params.RuleGroupResponse.Type;
            delete params.RuleGroupResponse;
            let rulesString = "# Last autofetched by Lambda: " + new Date().toUTCString() + "\n";
            rulesString += newRules.join("\n");
            params.RuleGroup.RulesSource.RulesString = rulesString;

            console.log("Updating rules...");
            let res = await networkfirewall.updateRuleGroup(params).promise();
            if (res) {
              console.log("Updated '" + params.RuleGroupName + "'.");
            } else {
              console.log("Error updating the rules for '" + params.RuleGroupName + "'...");
            }
            return;
          };

          let createRules = async function (action) {
            if (listOfRules.length == 0) {
              await fetchRules();
            } else {
              console.log("Using recently fetched list of rules...");
            }

            if (action == 'drop') listOfRules = listOfRules.map(rule => rule.replace("alert ", "drop "));

            return;
          };

          exports.handler = async (event, context) => {

            var rg = {Type: "STATEFUL", RuleGroupArn: '${StatefulRulegroup.RuleGroupArn}'};
            
            await createRules('${RuleGroupAction}');
            
            console.log("Searching Rule Groups for " + rg.RuleGroupArn + "...");
            let res = await networkfirewall.describeRuleGroup(rg).promise();
            if (res.RuleGroupResponse) {
              console.log("Found matching Rule Group...");
              await updateRules(res,listOfRules);
              if (event.ResponseURL) await response.send(event, context, response.SUCCESS);
            } else {
              console.log("ERROR: No matching Rule Group found...");
              if (event.ResponseURL) await response.send(event, context, response.FAILED);
            }
            
            return;
          };
