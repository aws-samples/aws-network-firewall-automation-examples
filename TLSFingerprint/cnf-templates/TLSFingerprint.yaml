Parameters:
  SNIRuleGroupName:
    Type: String
    Default: 'AllowListedSNIDomains'
  FingerprintRuleGroupName:
    Type: String
    Default: 'AutoUpdating-AllowListedTLSFingerprints'

Resources:
  SNIRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: !Sub "${AWS::StackName}-${SNIRuleGroupName}"
      Type: STATEFUL
      RuleGroup:
        RulesSource:
          RulesSourceList:
            GeneratedRulesType: ALLOWLIST
            Targets: 
              - www.aws.com
            TargetTypes: 
              - TLS_SNI
      Capacity: 1000
      Description: !Sub 'This rule is used to manage which domains are limiting access.  The CloudWatch Events Rule: TLFingerprintStatefulRulegroupHourlyTrigger, triggers a daily parse of the list of domains and adds their TLS fingerprint to the Rule Group: AllowListedTLSFingerprints'
      Tags: 
        - Key: "ProjectName"
          Value: "AllowListedTLSFingerprints"
  FingerprintRuleGroup:
    Type: 'AWS::NetworkFirewall::RuleGroup'
    Properties:
      RuleGroupName: !Sub "${AWS::StackName}-${FingerprintRuleGroupName}"
      Type: STATEFUL
      RuleGroup:
        RulesSource:
          RulesString: !Sub '#This rule is automatically managed by the CloudWatch Events Rule: TLFingerprintStatefulRulegroupHourlyTrigger; it fetches the domain list from the SNI Domain Rule Group and updates the TLS fingerprints daily.'
      Capacity: 1000
      Description: !Sub 'This rule is automatically managed by the CloudWatch Events Rule: TLFingerprintStatefulRulegroupHourlyTrigger; it fetches the domain list fromthe SNI Domain Rule Group and updates the TLS fingerprints daily.'
      Tags: 
        - Key: "ProjectName"
          Value: "AllowListedTLSFingerprints"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
      - PolicyName: NetworkFirewall
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'network-firewall:*'
            Resource: 
              - !GetAtt FingerprintRuleGroup.RuleGroupArn
          - Effect: Allow
            Action:
            - 'network-firewall:DescribeRuleGroup'
            Resource: 
              - !GetAtt SNIRuleGroup.RuleGroupArn
      Tags: 
          - Key: "ProjectName"
            Value: "AllowListedTLSFingerprints"
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "TLFingerprintStatefulRulegroupHourlyTrigger"
      ScheduleExpression: "cron(0 0 * * ? *)"
      State: "ENABLED"
      Targets: 
        - Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunction}"
      RetentionInDays: 14
    DeletionPolicy: Retain
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
  LambdaInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Handler: index.lambda_handler
      Timeout: 600
      Description: Used to check TLS server fingerprint and update the associated RuleGroup
      Tags: 
        - Key: "ProjectName"
          Value: "AllowListedTLSFingerprints"
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import random
          import urllib
          import ssl
          import socket
          import hashlib
          import base64
          from datetime import datetime
          import cfnresponse

          SOURCE_ARN = '${SNIRuleGroup.RuleGroupArn}'
          DESTINATION_ARN = '${FingerprintRuleGroup.RuleGroupArn}'

          nf = boto3.client('network-firewall')

          def gen_sid():
              return random.randint(0, 999999999)

          def get_domains(arn):
              params = {"Type": "STATEFUL", "RuleGroupArn": arn}
              try:
                  res = nf.describe_rule_group(**params)
                  if 'RuleGroupResponse' in res:
                      print("Found source rulegroup")
                      domains = res['RuleGroup']['RulesSource']['RulesSourceList']['Targets']
                      return domains
                  else:
                      print("ERROR: No matching Rule Group found")
              except Exception as e:
                  print(f"Error: {str(e)}")
              return None
              
          def fetch_cert(host, port=443):
              try:
                  context = ssl.create_default_context()
                  
                  with socket.create_connection((host, port)) as sock:
                      with context.wrap_socket(sock, server_hostname=host) as secure_sock:
                          der_cert = secure_sock.getpeercert(binary_form=True)
                          cert = secure_sock.getpeercert()

                  print(f"Hostname {host} verified successfully.")

                  # Extract common name
                  common_name = ''
                  if cert and 'subject' in cert:
                      subject = dict(x[0] for x in cert['subject'])
                      common_name = subject.get('commonName', '')

                  # Genrate SHA-1 fingerprint
                  sha1_fingerprint = hashlib.sha1(der_cert).hexdigest()
                  formatted_fingerprint = ':'.join(sha1_fingerprint[i:i+2] for i in range(0, len(sha1_fingerprint), 2))

                  print(f'  Fetching from: {host}')
                  print(f'    Subject Common Name: {common_name}')
                  print(f'    Certificate Fingerprint (SHA-1): {formatted_fingerprint}')

                  return {
                      'subject': {'CN': common_name},
                      'fingerprint': formatted_fingerprint
                  }
              except ssl.CertificateError as e:
                  print(f"Hostname verification failed for {host}: {e}")
                  return None
              except Exception as e:
                  print(f"Error fetching certificate for {host}: {str(e)}")
                  return None

          def update_rule_group(new_rule):
              params = {"Type": "STATEFUL", "RuleGroupArn": DESTINATION_ARN}
              try:
                  res = nf.describe_rule_group(**params)
                  if 'RuleGroupResponse' in res:
                      print("Found destination rulegroup")
                      res['RuleGroup']['RulesSource']['RulesString'] = new_rule
                      res.pop('Capacity', None)
                      res['RuleGroupName'] = res['RuleGroupResponse']['RuleGroupName']
                      res['Description'] = res['RuleGroupResponse']['Description']
                      res['Type'] = res['RuleGroupResponse']['Type']
                      # Remove keys that can't be updated
                      res.pop('ResponseMetadata', None)
                      res.pop('Capacity', None)
                      res.pop('RuleGroupResponse', None)

                      print("Updating rules")
                      result = nf.update_rule_group(**res)
                      if result:
                          print(f"Updated '{res['RuleGroupName']}'")
                          return True
                      else:
                          print(f"Error updating '{res['RuleGroupName']}'...")
                          return False
                  else:
                      print("No matching Rule Group found")
                      return False
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return False

          def lambda_handler(event, context):
              if event.get('RequestType') == "Delete":
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'message': 'Function executed successfully'})
                  return {'statusCode': 200, 'body': json.dumps('SUCCESS')}
              try:
                  print(f"Fetch a list of domains from: {SOURCE_ARN}")
                  domains = get_domains(SOURCE_ARN)
                  
                  if domains:
                      print(f"Using a list of: {len(domains)} domains")
                      new_rule = []
                      new_rule.append(f'# This rule is automatically managed by a Lambda')
                      new_rule.append(f'# Last updated: {datetime.utcnow().strftime("%a, %d %b %Y %H:%M:%S GMT")}')
                      
                      for domain in domains:
                          f_cert = fetch_cert(domain, port=443)
                          if f_cert:
                              new_rule.append(f'pass tls $EXTERNAL_NET any -> $HOME_NET any (msg:"Allow https://{domain}/"; tls.cert_fingerprint; content:"{f_cert["fingerprint"]}"; sid:{gen_sid()}; rev:1;)')
                          else:
                              new_rule.append(f'# ERROR: Unable to retrieve a fingerprint for: {domain}')

                      new_rule.append(f'drop tls $EXTERNAL_NET any -> $HOME_NET any (msg:"Drop all other TLS fingerprints"; tls.cert_fingerprint; content:!"{f_cert["fingerprint"]}"; sid:1; rev:1;)')
                    
                      update_success = update_rule_group('\n'.join(new_rule))
                      
                      if update_success:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {"message": "Successfully updated the rule group"}, None)
                          return {'statusCode': 200, 'body': json.dumps('SUCCESS')}
                      else:
                          cfnresponse.send(event, context, cfnresponse.FAILED, {"message": "Failed to update the rule group"}, None)
                          print("Failed to update the rule group")
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {"message": f"Error fetching a list of domains from: {SOURCE_ARN}"}, None)
                      print(f"Error fetching a list of domains from: {SOURCE_ARN}")
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"message": f"Unexpected error: {str(e)}"}, None)
                  print(f"Unexpected error: {str(e)}")